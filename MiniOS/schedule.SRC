; .\schedule.SRC generated from: src\schedule.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE src\schedule.c BROWSE DEBUG OBJECTEXTEND PRINT(.\schedule.lst) SRC(.\schedule.SRC)

$NOMOD51

NAME	SCHEDULE

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?_RegisterTask?SCHEDULE               SEGMENT CODE 
?PR?_RegisterPriorTask?SCHEDULE          SEGMENT CODE 
?PR?GetReadyTsk?SCHEDULE                 SEGMENT CODE 
?DT?GetReadyTsk?SCHEDULE                 SEGMENT DATA OVERLAYABLE 
?PR?GetReadyPriorTsk?SCHEDULE            SEGMENT CODE 
?DT?GetReadyPriorTsk?SCHEDULE            SEGMENT DATA OVERLAYABLE 
?PR?_DeregisterTask?SCHEDULE             SEGMENT CODE 
?DT?_DeregisterTask?SCHEDULE             SEGMENT DATA OVERLAYABLE 
?PR?_DeregisterPriorTask?SCHEDULE        SEGMENT CODE 
?DT?_DeregisterPriorTask?SCHEDULE        SEGMENT DATA OVERLAYABLE 
?PR?UpdateTskQueue?SCHEDULE              SEGMENT CODE 
?PR?UpdatePriorTskQueue?SCHEDULE         SEGMENT CODE 
?PR?ScheduleTask?SCHEDULE                SEGMENT CODE 
?PR?CanSchedule?SCHEDULE                 SEGMENT CODE 
?PR?LockSchMutex?SCHEDULE                SEGMENT CODE 
?PR?UnlockSchMutex?SCHEDULE              SEGMENT CODE 
?PR?IncIntNestCnt?SCHEDULE               SEGMENT CODE 
?PR?DecIntNestCnt?SCHEDULE               SEGMENT CODE 
	EXTRN	IDATA (gTskQueue)
	EXTRN	IDATA (gPriorTskQueue)
	EXTRN	IDATA (gTCBs)
	EXTRN	DATA (gSCB)
	PUBLIC	DecIntNestCnt
	PUBLIC	IncIntNestCnt
	PUBLIC	UnlockSchMutex
	PUBLIC	LockSchMutex
	PUBLIC	CanSchedule
	PUBLIC	ScheduleTask
	PUBLIC	UpdatePriorTskQueue
	PUBLIC	UpdateTskQueue
	PUBLIC	_DeregisterPriorTask
	PUBLIC	_DeregisterTask
	PUBLIC	GetReadyPriorTsk
	PUBLIC	GetReadyTsk
	PUBLIC	_RegisterPriorTask
	PUBLIC	_RegisterTask

	RSEG  ?DT?_DeregisterTask?SCHEDULE
?_DeregisterTask?BYTE:
    taskNum?446:   DS   1
	ORG  1
        pos?447:   DS   1

	RSEG  ?DT?_DeregisterPriorTask?SCHEDULE
?_DeregisterPriorTask?BYTE:
    taskNum?548:   DS   1
	ORG  1
  taskFound?549:   DS   1
        pos?550:   DS   1

	RSEG  ?DT?GetReadyTsk?SCHEDULE
?GetReadyTsk?BYTE:
    taskNum?244:   DS   1

	RSEG  ?DT?GetReadyPriorTsk?SCHEDULE
?GetReadyPriorTsk?BYTE:
    taskNum?345:   DS   1
; 
; #include <reg52.h>
; #include "../include/system.h"
; #include "../include/macro.h"
; 
; void UpdateTskQueue();
; 
; void UpdatePriorTskQueue();
; 
; int8_t CanSchedule();
; 
; void RegisterTask(uint8_t taskNum)

	RSEG  ?PR?_RegisterTask?SCHEDULE
_RegisterTask:
	USING	0
			; SOURCE LINE # 12
;---- Variable 'taskNum?040' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 13
; 	uint8_t pos;
; 	for (pos = 0; pos < MAX_TSK_NUM; pos++)
			; SOURCE LINE # 15
;---- Variable 'pos?041' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0001:
; 	{
			; SOURCE LINE # 16
; 		if (0 == gTskQueue[pos])
			; SOURCE LINE # 17
	MOV  	A,#LOW (gTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,@R0
	JNZ  	?C0003
; 		{
			; SOURCE LINE # 18
; 			gTskQueue[pos] = taskNum;
			; SOURCE LINE # 19
	MOV  	@R0,AR7
; 			gTCBs[taskNum].curTskStat = TSK_READY;
			; SOURCE LINE # 20
	MOV  	A,R7
	MOV  	B,#05H
	MUL  	AB
	ADD  	A,#LOW (gTCBs+03H)
	MOV  	R0,A
	MOV  	@R0,#01H
; 			break;
			; SOURCE LINE # 21
	RET  	
; 		}
			; SOURCE LINE # 22
; 	}
			; SOURCE LINE # 23
?C0003:
	INC  	R6
	CJNE 	R6,#05H,?C0001
; }
			; SOURCE LINE # 24
?C0005:
	RET  	
; END OF _RegisterTask

; 
; void RegisterPriorTask(uint8_t taskNum)

	RSEG  ?PR?_RegisterPriorTask?SCHEDULE
_RegisterPriorTask:
	USING	0
			; SOURCE LINE # 26
;---- Variable 'taskNum?142' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 27
; 	uint8_t pos;
; 	for (pos = 0; pos < MAX_TSK_NUM; pos++)
			; SOURCE LINE # 29
;---- Variable 'pos?143' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0006:
; 	{
			; SOURCE LINE # 30
; 		if (0 == gPriorTskQueue[pos])
			; SOURCE LINE # 31
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,@R0
	JNZ  	?C0008
; 		{
			; SOURCE LINE # 32
; 			gPriorTskQueue[pos] = taskNum;
			; SOURCE LINE # 33
	MOV  	@R0,AR7
; 			gTCBs[taskNum].curTskStat = TSK_READY;
			; SOURCE LINE # 34
	MOV  	A,R7
	MOV  	B,#05H
	MUL  	AB
	ADD  	A,#LOW (gTCBs+03H)
	MOV  	R0,A
	MOV  	@R0,#01H
; 			break;
			; SOURCE LINE # 35
	SJMP 	?C0007
; 		}
			; SOURCE LINE # 36
; 	}
			; SOURCE LINE # 37
?C0008:
	INC  	R6
	CJNE 	R6,#05H,?C0006
?C0007:
; 
; 	gSCB.priorityFlag = PRIORITY_ON;
			; SOURCE LINE # 39
	MOV  	gSCB+05H,#0FFH
; }
			; SOURCE LINE # 40
	RET  	
; END OF _RegisterPriorTask

; 
; uint8_t GetReadyTsk()

	RSEG  ?PR?GetReadyTsk?SCHEDULE
GetReadyTsk:
	USING	0
			; SOURCE LINE # 42
; {
			; SOURCE LINE # 43
; 	uint8_t taskNum;
; 
; 	taskNum = gTskQueue[0];
			; SOURCE LINE # 46
	MOV  	R0,#LOW (gTskQueue)
	MOV  	A,@R0
	MOV  	taskNum?244,A
; 
; 	if (0 != taskNum)
			; SOURCE LINE # 48
	JZ   	?C0011
; 	{
			; SOURCE LINE # 49
; 		UpdateTskQueue();
			; SOURCE LINE # 50
	LCALL	UpdateTskQueue
; 	}
			; SOURCE LINE # 51
?C0011:
; 
; 	return taskNum;	
			; SOURCE LINE # 53
	MOV  	R7,taskNum?244
; }
			; SOURCE LINE # 54
?C0012:
	RET  	
; END OF GetReadyTsk

; 
; uint8_t GetReadyPriorTsk()

	RSEG  ?PR?GetReadyPriorTsk?SCHEDULE
GetReadyPriorTsk:
	USING	0
			; SOURCE LINE # 56
; {
			; SOURCE LINE # 57
; 	uint8_t taskNum;
; 
; 	taskNum = gPriorTskQueue[0];
			; SOURCE LINE # 60
	MOV  	R0,#LOW (gPriorTskQueue)
	MOV  	A,@R0
	MOV  	taskNum?345,A
; 
; 	if (0 != taskNum)
			; SOURCE LINE # 62
	JZ   	?C0013
; 	{
			; SOURCE LINE # 63
; 		UpdatePriorTskQueue();
			; SOURCE LINE # 64
	LCALL	UpdatePriorTskQueue
; 	}
			; SOURCE LINE # 65
?C0013:
; 
; 	if (0 == gPriorTskQueue[0])
			; SOURCE LINE # 67
	MOV  	R0,#LOW (gPriorTskQueue)
	MOV  	A,@R0
	JNZ  	?C0014
; 	{
			; SOURCE LINE # 68
; 		gSCB.priorityFlag = PRIORITY_OFF;
			; SOURCE LINE # 69
	MOV  	gSCB+05H,A
; 	}
			; SOURCE LINE # 70
?C0014:
; 
; 	return taskNum;	
			; SOURCE LINE # 72
	MOV  	R7,taskNum?345
; }
			; SOURCE LINE # 73
?C0015:
	RET  	
; END OF GetReadyPriorTsk

; 
; void DeregisterTask(uint8_t taskNum)

	RSEG  ?PR?_DeregisterTask?SCHEDULE
_DeregisterTask:
	USING	0
			; SOURCE LINE # 75
	MOV  	taskNum?446,R7
; {
			; SOURCE LINE # 76
; 	uint8_t pos;
; 	for (pos = 0; pos < MAX_TSK_NUM; pos++)
			; SOURCE LINE # 78
	CLR  	A
	MOV  	pos?447,A
?C0016:
; 	{
			; SOURCE LINE # 79
; 		if (taskNum == gTskQueue[pos])
			; SOURCE LINE # 80
	MOV  	A,#LOW (gTskQueue)
	ADD  	A,pos?447
	MOV  	R0,A
	MOV  	A,taskNum?446
	XRL  	A,@R0
	JNZ  	?C0018
; 		{
			; SOURCE LINE # 81
; 			gTskQueue[pos] = 0;
			; SOURCE LINE # 82
	MOV  	@R0,A
; 			UpdateTskQueue();
			; SOURCE LINE # 83
	LJMP 	UpdateTskQueue
; 			break;
			; SOURCE LINE # 84
; 		}
			; SOURCE LINE # 85
; 	}
			; SOURCE LINE # 86
?C0018:
	INC  	pos?447
	MOV  	A,pos?447
	CLR  	C
	SUBB 	A,#05H
	JC   	?C0016
; }
			; SOURCE LINE # 87
?C0020:
	RET  	
; END OF _DeregisterTask

; 
; uint8_t DeregisterPriorTask(uint8_t taskNum)

	RSEG  ?PR?_DeregisterPriorTask?SCHEDULE
_DeregisterPriorTask:
	USING	0
			; SOURCE LINE # 89
	MOV  	taskNum?548,R7
; {
			; SOURCE LINE # 90
; 	uint8_t taskFound = 0;
			; SOURCE LINE # 91
	CLR  	A
	MOV  	taskFound?549,A
; 	uint8_t pos;
; 	for (pos = 0; pos < MAX_TSK_NUM; pos++)
			; SOURCE LINE # 93
	MOV  	pos?550,A
?C0021:
; 	{
			; SOURCE LINE # 94
; 		if (taskNum == gPriorTskQueue[pos])
			; SOURCE LINE # 95
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,pos?550
	MOV  	R0,A
	MOV  	A,taskNum?548
	XRL  	A,@R0
	JNZ  	?C0023
; 		{
			; SOURCE LINE # 96
; 			taskFound = 1;
			; SOURCE LINE # 97
	MOV  	taskFound?549,#01H
; 			gPriorTskQueue[pos] = 0;
			; SOURCE LINE # 98
	MOV  	@R0,A
; 			UpdatePriorTskQueue();
			; SOURCE LINE # 99
	LCALL	UpdatePriorTskQueue
; 			break;
			; SOURCE LINE # 100
	SJMP 	?C0022
; 		}
			; SOURCE LINE # 101
; 	}
			; SOURCE LINE # 102
?C0023:
	INC  	pos?550
	MOV  	A,pos?550
	CLR  	C
	SUBB 	A,#05H
	JC   	?C0021
?C0022:
; 
; 	if (0 == gPriorTskQueue[0])
			; SOURCE LINE # 104
	MOV  	R0,#LOW (gPriorTskQueue)
	MOV  	A,@R0
	JNZ  	?C0025
; 	{
			; SOURCE LINE # 105
; 		gSCB.priorityFlag = PRIORITY_OFF;
			; SOURCE LINE # 106
	MOV  	gSCB+05H,A
; 	}
			; SOURCE LINE # 107
?C0025:
; 
; 	return taskFound;
			; SOURCE LINE # 109
	MOV  	R7,taskFound?549
; }
			; SOURCE LINE # 110
?C0026:
	RET  	
; END OF _DeregisterPriorTask

; 
; void UpdateTskQueue()

	RSEG  ?PR?UpdateTskQueue?SCHEDULE
UpdateTskQueue:
	USING	0
			; SOURCE LINE # 112
; {
			; SOURCE LINE # 113
; 	uint8_t newPos;
; 	uint8_t oldPos;
; 	for (newPos = 0, oldPos = 0; oldPos < MAX_TSK_NUM; oldPos++)
			; SOURCE LINE # 116
;---- Variable 'newPos?651' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
;---- Variable 'oldPos?652' assigned to Register 'R6' ----
	MOV  	R6,A
?C0027:
; 	{
			; SOURCE LINE # 117
; 		if (0 != gTskQueue[oldPos])
			; SOURCE LINE # 118
	MOV  	A,#LOW (gTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,@R0
	JZ   	?C0030
; 		{
			; SOURCE LINE # 119
; 			gPriorTskQueue[newPos] = gPriorTskQueue[oldPos];
			; SOURCE LINE # 120
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R5,A
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,AR5
; 			newPos++; 
			; SOURCE LINE # 121
	INC  	R7
; 		}
			; SOURCE LINE # 122
?C0030:
; 
; 		if (MAX_TSK_NUM - 1 == oldPos)
			; SOURCE LINE # 124
	CJNE 	R6,#04H,?C0029
; 		{
			; SOURCE LINE # 125
; 			gPriorTskQueue[oldPos] = 0;
			; SOURCE LINE # 126
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
; 		}
			; SOURCE LINE # 127
; 	}
			; SOURCE LINE # 128
?C0029:
	INC  	R6
	CJNE 	R6,#05H,?C0027
; }
			; SOURCE LINE # 129
?C0032:
	RET  	
; END OF UpdateTskQueue

; 
; void UpdatePriorTskQueue()

	RSEG  ?PR?UpdatePriorTskQueue?SCHEDULE
UpdatePriorTskQueue:
	USING	0
			; SOURCE LINE # 131
; {
			; SOURCE LINE # 132
; 	uint8_t newPos;
; 	uint8_t oldPos;
; 	for (newPos = 0, oldPos = 0; oldPos < MAX_TSK_NUM; oldPos++)
			; SOURCE LINE # 135
;---- Variable 'newPos?753' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
;---- Variable 'oldPos?754' assigned to Register 'R6' ----
	MOV  	R6,A
?C0033:
; 	{
			; SOURCE LINE # 136
; 		if (0 != gPriorTskQueue[oldPos])
			; SOURCE LINE # 137
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R5,A
	JZ   	?C0036
; 		{
			; SOURCE LINE # 138
; 			gPriorTskQueue[newPos] = gPriorTskQueue[oldPos];
			; SOURCE LINE # 139
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,AR5
; 			newPos++; 
			; SOURCE LINE # 140
	INC  	R7
; 		}
			; SOURCE LINE # 141
?C0036:
; 
; 		if (MAX_TSK_NUM - 1 == oldPos)
			; SOURCE LINE # 143
	CJNE 	R6,#04H,?C0035
; 		{
			; SOURCE LINE # 144
; 			gPriorTskQueue[oldPos] = 0;
			; SOURCE LINE # 145
	MOV  	A,#LOW (gPriorTskQueue)
	ADD  	A,R6
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
; 		}
			; SOURCE LINE # 146
; 	}
			; SOURCE LINE # 147
?C0035:
	INC  	R6
	CJNE 	R6,#05H,?C0033
; }
			; SOURCE LINE # 148
?C0038:
	RET  	
; END OF UpdatePriorTskQueue

; 
; void ScheduleTask()

	RSEG  ?PR?ScheduleTask?SCHEDULE
ScheduleTask:
	USING	0
			; SOURCE LINE # 150
; {
			; SOURCE LINE # 151
; 	EA = INT_OFF;
			; SOURCE LINE # 152
	CLR  	EA
; 
; 	if (!CanSchedule())
			; SOURCE LINE # 154
	LCALL	CanSchedule
	MOV  	A,R7
	JNZ  	?C0039
; 	{
			; SOURCE LINE # 155
; 		EA = INT_ON;
			; SOURCE LINE # 156
	SETB 	EA
	RET  	
; 		return;
; 	}
			; SOURCE LINE # 158
?C0039:
; 
; 	if (0 == gSCB.nextTskNum)
			; SOURCE LINE # 160
	MOV  	A,gSCB+01H
	JNZ  	?C0041
; 	{
			; SOURCE LINE # 161
; 		if (PRIORITY_ON == gSCB.priorityFlag)
			; SOURCE LINE # 162
	MOV  	A,gSCB+05H
	CJNE 	A,#0FFH,?C0042
; 		{
			; SOURCE LINE # 163
; 			gSCB.nextTskNum = GetReadyPriorTsk();
			; SOURCE LINE # 164
	LCALL	GetReadyPriorTsk
	MOV  	gSCB+01H,R7
; 		}
			; SOURCE LINE # 165
	SJMP 	?C0041
?C0042:
; 		else
; 		{
			; SOURCE LINE # 167
; 			gSCB.nextTskNum = GetReadyTsk();
			; SOURCE LINE # 168
	LCALL	GetReadyTsk
	MOV  	gSCB+01H,R7
; 		}
			; SOURCE LINE # 169
; 	}
			; SOURCE LINE # 170
?C0041:
; 
; 	gSCB.timeSlice = SYS_TIMESLICE;
			; SOURCE LINE # 172
	MOV  	gSCB+02H,#05H
; 
; 	if (gSCB.curTskNum != gSCB.nextTskNum)
			; SOURCE LINE # 174
	MOV  	A,gSCB
	XRL  	A,gSCB+01H
	JZ   	?C0044
; 	{
			; SOURCE LINE # 175
; 		/*push current task data into task stack*/
; 		__asm PUSH ACC
	 PUSH ACC
; 		__asm PUSH B
	 PUSH B
; 		__asm PUSH PSW
	 PUSH PSW
; 		__asm PUSH AR0
	 PUSH AR0
; 		__asm PUSH AR1
	 PUSH AR1
; 		//__asm PUSH AR2
; 		//__asm PUSH AR3
; 		__asm PUSH AR4
	 PUSH AR4
; 		__asm PUSH AR5
	 PUSH AR5
; 		__asm PUSH AR6
	 PUSH AR6
; 		__asm PUSH AR7
	 PUSH AR7
; 
; 		gTCBs[gSCB.curTskNum].taskSP = SP;
			; SOURCE LINE # 189
	MOV  	A,gSCB
	MOV  	B,#05H
	MUL  	AB
	ADD  	A,#LOW (gTCBs+02H)
	MOV  	R0,A
	MOV  	@R0,SP
; 		gSCB.curTskNum = gSCB.nextTskNum;
			; SOURCE LINE # 190
	MOV  	gSCB,gSCB+01H
; 		gSCB.nextTskNum = 0;
			; SOURCE LINE # 191
	CLR  	A
	MOV  	gSCB+01H,A
; 		SP = gTCBs[gSCB.curTskNum].taskSP;
			; SOURCE LINE # 192
	MOV  	A,gSCB
	MOV  	B,#05H
	MUL  	AB
	ADD  	A,#LOW (gTCBs+02H)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; 
; 		/*pop new task data from task stack*/
; 		__asm POP AR7
	 POP AR7
; 		__asm POP AR6
	 POP AR6
; 		__asm POP AR5
	 POP AR5
; 		__asm POP AR4
	 POP AR4
; 		//__asm POP AR3
; 		//__asm POP AR2
; 		__asm POP AR1
	 POP AR1
; 		__asm POP AR0
	 POP AR0
; 		__asm POP PSW
	 POP PSW
; 		__asm POP B
	 POP B
; 		__asm POP ACC
	 POP ACC
; 	}
			; SOURCE LINE # 206
?C0044:
; 
; 	EA = INT_ON;
			; SOURCE LINE # 208
	SETB 	EA
; }
			; SOURCE LINE # 209
?C0040:
	RET  	
; END OF ScheduleTask

; 
; int8_t CanSchedule()

	RSEG  ?PR?CanSchedule?SCHEDULE
CanSchedule:
	USING	0
			; SOURCE LINE # 211
; {
			; SOURCE LINE # 212
; 	if (SYS_ON != gSCB.sysRunningFlag)
			; SOURCE LINE # 213
	MOV  	A,gSCB+07H
	CPL  	A
	JZ   	?C0045
; 	{
			; SOURCE LINE # 214
; 		return 0;
			; SOURCE LINE # 215
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 216
?C0045:
; 	
; 	if (SCHMUTEX_ON == gSCB.schMutex)
			; SOURCE LINE # 218
	MOV  	A,gSCB+03H
	CJNE 	A,#01H,?C0047
; 	{
			; SOURCE LINE # 219
; 		return 0;
			; SOURCE LINE # 220
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 221
?C0047:
; 
; 	if (0 != gSCB.intNestCnt)
			; SOURCE LINE # 223
	MOV  	A,gSCB+04H
	JZ   	?C0048
; 	{
			; SOURCE LINE # 224
; 		return 0;
			; SOURCE LINE # 225
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 226
?C0048:
; 
; 	if (SYS_SERVICE == gSCB.sysMode)
			; SOURCE LINE # 228
	MOV  	A,gSCB+06H
	CJNE 	A,#04H,?C0049
; 	{
			; SOURCE LINE # 229
; 		return 0;
			; SOURCE LINE # 230
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 231
?C0049:
; 
; 	if (0 != gSCB.timeSlice)
			; SOURCE LINE # 233
	MOV  	A,gSCB+02H
	JZ   	?C0050
; 	{
			; SOURCE LINE # 234
; 		return 0;
			; SOURCE LINE # 235
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 236
?C0050:
; 
; 	return 1;
			; SOURCE LINE # 238
	MOV  	R7,#01H
; }
			; SOURCE LINE # 239
?C0046:
	RET  	
; END OF CanSchedule

; 
; void LockSchMutex()

	RSEG  ?PR?LockSchMutex?SCHEDULE
LockSchMutex:
			; SOURCE LINE # 241
; {
			; SOURCE LINE # 242
; 	EA = INT_OFF;
			; SOURCE LINE # 243
	CLR  	EA
; 	gSCB.schMutex = SCHMUTEX_ON;
			; SOURCE LINE # 244
	MOV  	gSCB+03H,#01H
; 	EA = INT_ON;
			; SOURCE LINE # 245
	SETB 	EA
; }
			; SOURCE LINE # 246
	RET  	
; END OF LockSchMutex

; 
; void UnlockSchMutex()

	RSEG  ?PR?UnlockSchMutex?SCHEDULE
UnlockSchMutex:
			; SOURCE LINE # 248
; {
			; SOURCE LINE # 249
; 	EA = INT_OFF;
			; SOURCE LINE # 250
	CLR  	EA
; 	gSCB.schMutex = SCHMUTEX_OFF;
			; SOURCE LINE # 251
	CLR  	A
	MOV  	gSCB+03H,A
; 	EA = INT_ON;
			; SOURCE LINE # 252
	SETB 	EA
; }
			; SOURCE LINE # 253
	RET  	
; END OF UnlockSchMutex

; 
; void IncIntNestCnt()

	RSEG  ?PR?IncIntNestCnt?SCHEDULE
IncIntNestCnt:
			; SOURCE LINE # 255
; {
			; SOURCE LINE # 256
; 	EA = INT_OFF;
			; SOURCE LINE # 257
	CLR  	EA
; 	if (gSCB.intNestCnt < MAX_INTNEST_CNT)
			; SOURCE LINE # 258
	MOV  	A,gSCB+04H
	CLR  	C
	SUBB 	A,#05H
	JNC  	?C0053
; 	{
			; SOURCE LINE # 259
; 		gSCB.intNestCnt++;
			; SOURCE LINE # 260
	INC  	gSCB+04H
; 	}
			; SOURCE LINE # 261
?C0053:
; 	EA = INT_ON;
			; SOURCE LINE # 262
	SETB 	EA
; }
			; SOURCE LINE # 263
	RET  	
; END OF IncIntNestCnt

; 
; void DecIntNestCnt()

	RSEG  ?PR?DecIntNestCnt?SCHEDULE
DecIntNestCnt:
			; SOURCE LINE # 265
; {
			; SOURCE LINE # 266
; 	EA = INT_OFF;
			; SOURCE LINE # 267
	CLR  	EA
; 	if (gSCB.intNestCnt > 0)
			; SOURCE LINE # 268
	MOV  	A,gSCB+04H
	SETB 	C
	SUBB 	A,#00H
	JC   	?C0055
; 	{
			; SOURCE LINE # 269
; 		gSCB.intNestCnt--;
			; SOURCE LINE # 270
	DEC  	gSCB+04H
; 	}
			; SOURCE LINE # 271
?C0055:
; 	EA = INT_ON;
			; SOURCE LINE # 272
	SETB 	EA
; }
			; SOURCE LINE # 273
	RET  	
; END OF DecIntNestCnt

	END
